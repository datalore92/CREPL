name: Build CREPL

on:
  push:
    tags:
      - 'v*'  # Run on tag push of pattern v*, like v1.0.0, v20.15.10
  workflow_dispatch:  # Allow manual trigger of workflow

permissions:
  contents: write  # Add explicit permission to create releases

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup MinGW using chocolatey
        uses: crazy-max/ghaction-chocolatey@v2
        with:
          args: install mingw -y

      - name: Add MinGW to PATH
        run: echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Check SDL2 directory structure
        run: |
          # Verify the existing directory structure
          Get-ChildItem lib/SDL2
          Get-ChildItem lib/SDL2_ttf
          
          # Verify include paths
          Get-ChildItem lib/SDL2/SDL2-2.32.4/include
          Get-ChildItem lib/SDL2_ttf/SDL2_ttf-2.24.0/include
          
          # Verify library paths
          Get-ChildItem lib/SDL2/SDL2-2.32.4/lib/x64
          Get-ChildItem lib/SDL2_ttf/SDL2_ttf-2.24.0/lib/x64

      - name: Create custom CMake script
        run: |
          # Create a custom CMake file to properly handle SDL2 paths for MinGW
          @"
          # Find SDL2 and SDL2_ttf in our fixed locations
          set(SDL2_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/lib/SDL2/SDL2-2.32.4/include")
          set(SDL2_LIBRARIES "${CMAKE_CURRENT_SOURCE_DIR}/lib/SDL2/SDL2-2.32.4/lib/x64/SDL2.lib" "${CMAKE_CURRENT_SOURCE_DIR}/lib/SDL2/SDL2-2.32.4/lib/x64/SDL2main.lib")
          set(SDL2_TTF_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/lib/SDL2_ttf/SDL2_ttf-2.24.0/include")
          set(SDL2_TTF_LIBRARIES "${CMAKE_CURRENT_SOURCE_DIR}/lib/SDL2_ttf/SDL2_ttf-2.24.0/lib/x64/SDL2_ttf.lib")
          
          # Set include directories
          include_directories(${SDL2_INCLUDE_DIRS} ${SDL2_TTF_INCLUDE_DIRS})
          "@ | Out-File -FilePath FindSDL2Custom.cmake -Encoding utf8

      - name: Manual conversion of lib files for MinGW
        run: |
          # MinGW requires .a format, not .lib format
          # Create the necessary directory structure
          mkdir -p mingw_lib
          
          # Convert the .lib files to .a files for MinGW
          pushd lib/SDL2/SDL2-2.32.4/lib/x64
          C:/mingw64/bin/gendef SDL2.dll
          C:/mingw64/bin/dlltool --dllname SDL2.dll --def SDL2.def --output-lib ../../../../mingw_lib/libSDL2.a
          popd
          
          pushd lib/SDL2_ttf/SDL2_ttf-2.24.0/lib/x64
          C:/mingw64/bin/gendef SDL2_ttf.dll
          C:/mingw64/bin/dlltool --dllname SDL2_ttf.dll --def SDL2_ttf.def --output-lib ../../../../mingw_lib/libSDL2_ttf.a
          popd

      - name: Build with MinGW
        run: |
          mkdir -p build
          cd build
          cmake -G "MinGW Makefiles" .. -DCMAKE_MODULE_PATH=.. -DCMAKE_C_FLAGS="-I../lib/SDL2/SDL2-2.32.4/include -I../lib/SDL2_ttf/SDL2_ttf-2.24.0/include" -DCMAKE_EXE_LINKER_FLAGS="-L../mingw_lib -lSDL2 -lSDL2_ttf -lmingw32"
          mingw32-make VERBOSE=1

      - name: Create Release Zip
        run: |
          mkdir release
          copy build\crepl.exe release\crepl.exe
          copy lib\SDL2\SDL2-2.32.4\lib\x64\SDL2.dll release\
          copy lib\SDL2_ttf\SDL2_ttf-2.24.0\lib\x64\SDL2_ttf.dll release\
          copy lib\SDL2_ttf\SDL2_ttf-2.24.0\lib\x64\zlib1.dll release\
          copy lib\SDL2_ttf\SDL2_ttf-2.24.0\lib\x64\freetype.dll release\
          cd release
          7z a ..\crepl-windows.zip *

      - name: Upload Windows Build
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: crepl-windows.zip
          token: ${{ github.token }}

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SDL2 and SDL2_ttf
        run: sudo apt-get update && sudo apt-get install -y libsdl2-dev libsdl2-ttf-dev

      - name: Build with GCC
        run: |
          mkdir -p build
          cd build
          cmake ..
          make

      - name: Create Release Tar
        run: |
          mkdir -p release
          cp build/crepl release/crepl
          cd release
          tar -czvf ../crepl-linux.tar.gz *

      - name: Upload Linux Build
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: crepl-linux.tar.gz
          token: ${{ github.token }}