name: Build CREPL

on:
  push:
    tags:
      - 'v*'  # Run on tag push of pattern v*, like v1.0.0, v20.15.10
  workflow_dispatch:  # Allow manual trigger of workflow

permissions:
  contents: write  # Add explicit permission to create releases

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup MinGW using chocolatey
        uses: crazy-max/ghaction-chocolatey@v2
        with:
          args: install mingw -y

      - name: Add MinGW to PATH
        run: echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Download SDL2 MinGW development libraries
        run: |
          # Download MinGW-compatible SDL2 development libraries
          curl -L https://github.com/libsdl-org/SDL/releases/download/release-2.32.4/SDL2-devel-2.32.4-mingw.zip -o SDL2-mingw.zip
          7z x SDL2-mingw.zip
          
          # Download MinGW-compatible SDL2_ttf development libraries
          curl -L https://github.com/libsdl-org/SDL_ttf/releases/download/release-2.24.0/SDL2_ttf-devel-2.24.0-mingw.zip -o SDL2_ttf-mingw.zip
          7z x SDL2_ttf-mingw.zip
          
          # Create mingw_lib directory to store .a files
          mkdir -p mingw_lib
          
          # Copy the MinGW-compatible library files
          Copy-Item -Path SDL2-2.32.4/x86_64-w64-mingw32/lib/*.a -Destination mingw_lib/
          Copy-Item -Path SDL2_ttf-2.24.0/x86_64-w64-mingw32/lib/*.a -Destination mingw_lib/
          
          # List files in the mingw_lib directory
          Get-ChildItem mingw_lib
          
          # Examine SDL2 include directory structure
          Write-Host "SDL2 Include Directory Structure:"
          Get-ChildItem -Recurse SDL2-2.32.4/x86_64-w64-mingw32/include
          Write-Host "SDL2_ttf Include Directory Structure:"
          Get-ChildItem -Recurse SDL2_ttf-2.24.0/x86_64-w64-mingw32/include

      - name: Prepare include directories
        run: |
          # Create a directory for modified headers if needed
          mkdir -p include_sdl2
          
          # Copy SDL2 header files for easier inclusion
          Copy-Item -Path SDL2-2.32.4/x86_64-w64-mingw32/include/* -Destination include_sdl2/ -Recurse
          Copy-Item -Path SDL2_ttf-2.24.0/x86_64-w64-mingw32/include/* -Destination include_sdl2/ -Recurse

      - name: Create simplified CMakeLists.txt directly
        run: |
          $cmakeContent = @'
          cmake_minimum_required(VERSION 3.10)
          project(CREPL C)
          
          # Set C standard
          set(CMAKE_C_STANDARD 11)
          
          # SDL2 paths with absolute paths
          set(SDL2_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/SDL2-2.32.4/x86_64-w64-mingw32/include")
          set(SDL2_TTF_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/SDL2_ttf-2.24.0/x86_64-w64-mingw32/include")
          set(SDL2_COMBINED_INCLUDE "${CMAKE_CURRENT_SOURCE_DIR}/include_sdl2")
          
          # Include directories
          include_directories(
              "${CMAKE_CURRENT_SOURCE_DIR}/include"
              "${SDL2_INCLUDE_DIR}"
              "${SDL2_TTF_INCLUDE_DIR}"
              "${SDL2_COMBINED_INCLUDE}"
              "${SDL2_INCLUDE_DIR}/SDL2"  # Try with SDL2 subdirectory
          )
          
          # Source files with explicit paths
          set(SOURCES
              "${CMAKE_CURRENT_SOURCE_DIR}/src/main.c"
              "${CMAKE_CURRENT_SOURCE_DIR}/src/repl_core.c"
              "${CMAKE_CURRENT_SOURCE_DIR}/src/repl_ui.c"
              "${CMAKE_CURRENT_SOURCE_DIR}/src/repl_input.c"
              "${CMAKE_CURRENT_SOURCE_DIR}/src/repl_variables.c"
              "${CMAKE_CURRENT_SOURCE_DIR}/src/repl_history.c"
              "${CMAKE_CURRENT_SOURCE_DIR}/src/repl_eval.c"
          )
          
          # Display source files for debugging
          message(STATUS "Source files: ${SOURCES}")
          
          # Create executable
          add_executable(crepl ${SOURCES})
          
          # Additional compiler flags for SDL
          target_compile_definitions(crepl PRIVATE 
              PLATFORM_WINDOWS=1 
              _REENTRANT
          )
          
          # Set libraries
          target_link_libraries(crepl 
              mingw32
              "${CMAKE_CURRENT_SOURCE_DIR}/mingw_lib/libSDL2main.a"
              "${CMAKE_CURRENT_SOURCE_DIR}/mingw_lib/libSDL2.a"
              "${CMAKE_CURRENT_SOURCE_DIR}/mingw_lib/libSDL2_ttf.a"
              imm32
              setupapi
              version
              winmm
          )
          
          # Set subsystem properties
          set_target_properties(crepl PROPERTIES WIN32_EXECUTABLE TRUE)
          '@

          # Write the CMakeLists.txt file
          Set-Content -Path "CMakeLists.txt" -Value $cmakeContent

      - name: Inspect and fix header files if needed
        run: |
          # Check repl_core.h to see how it includes SDL.h
          Get-Content include/repl_core.h
          
          # Create a simple wrapper if needed
          if (Test-Path "include_sdl2/SDL.h") {
              Write-Host "SDL.h already exists in the include directory"
          } else {
              @"
          #ifndef SDL_H_WRAPPER
          #define SDL_H_WRAPPER
          
          #include "SDL2/SDL.h"
          
          #endif /* SDL_H_WRAPPER */
          "@ | Out-File -FilePath "include_sdl2/SDL.h" -Encoding utf8
              Write-Host "Created SDL.h wrapper"
          }
          
          # Also create SDL_ttf.h wrapper if needed
          if (Test-Path "include_sdl2/SDL_ttf.h") {
              Write-Host "SDL_ttf.h already exists in the include directory"
          } else {
              @"
          #ifndef SDL_TTF_H_WRAPPER
          #define SDL_TTF_H_WRAPPER
          
          #include "SDL2/SDL_ttf.h"
          
          #endif /* SDL_TTF_H_WRAPPER */
          "@ | Out-File -FilePath "include_sdl2/SDL_ttf.h" -Encoding utf8
              Write-Host "Created SDL_ttf.h wrapper"
          }

      - name: Build with MinGW
        run: |
          # Show the content of the custom CMakeLists.txt for debugging
          Get-Content CMakeLists.txt
          
          # List source files to ensure they exist
          Get-ChildItem src
          
          # Create build directory
          mkdir -p build
          cd build
          
          # Run CMake with the custom CMakeLists.txt
          cmake -G "MinGW Makefiles" .. --debug-output
          
          # Build the project
          mingw32-make VERBOSE=1

      - name: Create Release Zip
        if: success()
        run: |
          mkdir release
          copy build\crepl.exe release\crepl.exe
          
          # Copy SDL2 DLLs from the MinGW-compatible download
          copy SDL2-2.32.4\x86_64-w64-mingw32\bin\SDL2.dll release\
          copy SDL2_ttf-2.24.0\x86_64-w64-mingw32\bin\SDL2_ttf.dll release\
          copy SDL2_ttf-2.24.0\x86_64-w64-mingw32\bin\zlib1.dll release\
          copy SDL2_ttf-2.24.0\x86_64-w64-mingw32\bin\freetype.dll release\
          
          cd release
          7z a ..\crepl-windows.zip *

      - name: Upload Windows Build
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: crepl-windows.zip
          token: ${{ github.token }}

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SDL2 and SDL2_ttf
        run: sudo apt-get update && sudo apt-get install -y libsdl2-dev libsdl2-ttf-dev

      - name: Build with GCC
        run: |
          mkdir -p build
          cd build
          cmake ..
          make

      - name: Create Release Tar
        run: |
          mkdir -p release
          cp build/crepl release/crepl
          cd release
          tar -czvf ../crepl-linux.tar.gz *

      - name: Upload Linux Build
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: crepl-linux.tar.gz
          token: ${{ github.token }}